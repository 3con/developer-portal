---
custom:
  writeEnvVars: ${file(./env.yml)}
  webpackIncludeModules: true

service: "${file(./env.yml):SERVICE_NAME}"

plugins:
   - serverless-plugin-write-env-vars
   - serverless-offline
   - serverless-run-function-plugin
   - serverless-webpack

package:
  exclude:
    - package.json
  include:
    - lib
    - node_modules
    - .env

provider:
  name: aws
  region: ${file(./env.yml):REGION}
  stage: ${file(./env.yml):STAGE}
  runtime: nodejs4.3
  memory: 256
  timeout: 30
  #cfLogs: true
  stackTags:
    DeveloperPortalStack: "${file(./env.yml):SERVICE_NAME}_${file(./env.yml):STAGE}"
  iamRoleStatements:
    -
      Action:
        - "s3:*"
      Effect: Allow
      Resource:
        - "arn:aws:s3:::${file(./env.yml):S3_BUCKET}/*"
    -
      Action:
        - "ses:SendEmail"
      Effect: Allow
      Resource:
        - "*"
    -
      Action:
        - "cognito-identity:*"
        - "cognito-idp:*"
      Effect: Allow
      Resource:
        - "arn:aws:cognito-idp:${file(./env.yml):REGION}:${file(./env.yml):ACCOUNT_ID}:userpool/${file(./env.yml):COGNITO_POOL_ID}"
    -
      Action:
        - "cloudwatchlogs:*"
      Effect: Allow
      Resource:
        - "*"

functions:
  authorizer:
    handler: authorizer.authorizer
  logger:
      handler: logger.handler

  adminAppsApprove:
    handler: admin.appApprove
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: post
          path: "admin/apps/{id}/approve"
          default:
            statusCode: 204
  adminAppsList:
    handler: admin.apps
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: get
          path: "admin/apps"
  adminUsersList:
    handler: admin.users
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: get
          path: "admin/users"
  adminUsersMakeAdmin:
    handler: admin.userMakeAdmin
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: post
          path: "admin/users/{email}/admin"
          default:
            statusCode: 204
  adminUsersEnable:
    handler: admin.userEnable
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: post
          path: "admin/users/{email}/enable"
          default:
            statusCode: 204
  vendorAppsApprove:
    handler: apps-approve.handler
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: post
          path: "vendor/apps/{appId}/approve"
          integration: lambda-proxy
  vendorAppsCreate:
    handler: apps-update.appsCreate
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: post
          path: vendor/apps
          integration: lambda-proxy
  vendorAppsDetail:
    handler: apps-list.appsDetail
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: get
          path: "vendor/apps/{appId}"
          integration: lambda-proxy
      -
        http:
          authorizer: authorizer
          cors: true
          method: get
          path: "vendor/apps/{appId}/versions/{version}"
          integration: lambda-proxy
  vendorAppsIconsLinks:
    handler: apps-icons.links
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: post
          path: "vendor/apps/{appId}/icons"
          integration: lambda-proxy
  vendorAppsIconsUpload:
    handler: apps-icons.upload
    events:
      -
        s3:
          bucket: "${file(./env.yml):S3_BUCKET}"
          event: "s3:ObjectCreated:Put"
          suffix: .png
  vendorAppsList:
    handler: apps-list.appsList
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: get
          path: vendor/apps
          integration: lambda-proxy
  vendorAppsUpdate:
    handler: apps-update.appsUpdate
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: patch
          path: vendor/apps/{appId}
          integration: lambda-proxy
  vendorAppsVersionsList:
    handler: apps-versions.list
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: get
          path: "vendor/apps/{appId}/versions"
          integration: lambda-proxy
  vendorAppsVersionsRollback:
    handler: apps-versions.rollback
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: post
          path: "vendor/apps/{appId}/versions/{version}/rollback"
          integration: lambda-proxy


  authEmailTrigger:
    handler: auth-email.emailTrigger
  authConfirmPost:
    handler: auth.confirmPost
    events:
      -
        http:
          cors: true
          method: post
          path: "auth/confirm/{email}/{code}"
          integration: lambda-proxy
  authConfirmGet:
    handler: auth.confirmGet
    events:
      -
        http:
          cors: true
          method: get
          path: "auth/confirm/{email}/{code}"
          integration: lambda-proxy
  authConfirmResend:
    handler: auth.confirmResend
    events:
      -
        http:
          cors: true
          method: post
          path: auth/confirm
          integration: lambda-proxy
  authForgot:
    handler: auth.forgot
    events:
      -
        http:
          cors: true
          method: post
          path: "auth/forgot/{email}"
          integration: lambda-proxy
  authForgotConfirm:
    handler: auth.forgotConfirm
    events:
      -
        http:
          cors: true
          method: post
          path: "auth/forgot/{email}/confirm"
          integration: lambda-proxy
  authLogin:
    handler: auth.login
    events:
      -
        http:
          cors: true
          method: post
          path: auth/login
          integration: lambda-proxy
  authProfile:
    handler: auth.profile
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: get
          path: auth/profile
          integration: lambda-proxy
  authProfileChange:
    handler: auth.profileChange
    events:
      -
        http:
          authorizer: authorizer
          cors: true
          method: put
          path: auth/profile
          integration: lambda-proxy
  authSignup:
    handler: auth.signup
    events:
      -
        http:
          cors: true
          method: post
          path: auth/signup
          integration: lambda-proxy

  appsDetail:
    handler: public.detail
    events:
      -
        http:
          cors: true
          method: get
          path: "apps/{appId}"
          integration: lambda-proxy
      -
        http:
          cors: true
          method: get
          path: "apps/{appId}/versions/{version}"
          integration: lambda-proxy
  appsList:
    handler: public.list
    events:
      -
        http:
          cors: true
          method: get
          path: apps
          integration: lambda-proxy
  appsVersionsList:
    handler: public.versions
    events:
      -
        http:
          cors: true
          method: get
          path: "apps/{appId}/versions"
          integration: lambda-proxy
  vendorsList:
    handler: public.vendorsList
    events:
      -
        http:
          cors: true
          method: get
          path: "vendors"
          integration: lambda-proxy
  vendorDetail:
    handler: public.vendorDetail
    events:
      -
        http:
          cors: true
          method: get
          path: "vendors/{vendor}"
          integration: lambda-proxy

resources:
  Resources:
    Rds:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: "5"
        DBName: "${file(./env.yml):RDS_DATABASE}"
        DBInstanceIdentifier: "${file(./env.yml):SERVICE_NAME}-rds"
        DBInstanceClass: "${file(./env.yml):RDS_INSTANCE_CLASS}"
        Engine: "mysql"
        EngineVersion: "5.7"
        MasterUsername: "${file(./env.yml):RDS_USER}"
        MasterUserPassword: "${file(./env.yml):RDS_PASSWORD}"
        PubliclyAccessible: "true"
    CloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            -
              DomainName: ${file(./env.yml):S3_BUCKET}.s3.amazonaws.com
              Id: "S3-${file(./env.yml):S3_BUCKET}"
              S3OriginConfig:
                OriginAccessIdentity: ""
          Enabled: 'true'
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: "S3-${file(./env.yml):S3_BUCKET}"
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: https-only
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
  Outputs:
    RdsUri:
      Description: "RDS Endpoint"
      Value:
        "Fn::GetAtt": ["Rds", "Endpoint.Address"]
    RdsPort:
      Description: "RDS Port"
      Value:
        "Fn::GetAtt": ["Rds", "Endpoint.Port"]
    CloudFrontUri:
      Description: "CloudFront Uri"
      Value:
        "Fn::GetAtt": ["CloudFront", "DomainName"]
