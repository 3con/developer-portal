---
custom:
  webpackIncludeModules: true
  cognitoPoolArn: "arn:aws:cognito-idp:${file(./env.yml):REGION}:${file(./env.yml):ACCOUNT_ID}:userpool/${file(./env.yml):COGNITO_POOL_ID}"
  cognitoAuthorizer:
    arn: ${self:custom.cognitoPoolArn}
  logSubscriptionFunction: logger

service: "${file(./env.yml):SERVICE_NAME}"

plugins:
  - db-migration
  - log-subscription
  - serverless-webpack

package:
  exclude:
    - package.json
  include:
    - lib
    - node_modules
    - .env

provider:
  name: aws
  region: ${file(./env.yml):REGION}
  stage: ${file(./env.yml):STAGE}
  profile: ${file(./env.yml):PROFILE}
  runtime: nodejs4.3
  memorySize: 256
  timeout: 30
  versionFunctions: false
  environment: ${file(./env.yml)}
  role: developerPortalLambdaRole
  vpc:
    securityGroupIds:
      - ${file(./env.yml):VPC_SECURITY_GROUP}
    subnetIds:
      - ${file(./env.yml):VPC_SUBNET1}
      - ${file(./env.yml):VPC_SUBNET2}
  stackTags:
    KeboolaStack: ${file(./env.yml):KEBOOLA_STACK}
  stackPolicy:
    - Effect: Allow
      Principal: "*"
      Action: "Update:*"
      Resource: "*"
    - Effect: Deny
      Principal: "*"
      Action:
        - Update:Replace
        - Update:Delete
      Condition:
        StringEquals:
          ResourceType:
            - AWS::RDS::DBInstance

functions:

  logger:
      handler: logger.handler

  dbMigration:
      timeout: 300
      handler: dbMigration.handler

  public:
    handler: public.public
    events:
      -
        http:
          method: get
          path: "/"
      -
        http:
          method: get
          path: "apps/{vendor}/{app}"
      -
        http:
          method: get
          path: "apps"
      -
        http:
          method: get
          path: "stacks"
      -
        http:
          method: get
          path: "vendors"
      -
        http:
          method: get
          path: "vendors/{vendor}"
      -
        schedule:
          rate: rate(15 minutes)
          enabled: ${file(./env.yml):WARMUP_ENABLED}
      -
        http:
          method: get
          path: "{anything}"
      -
        http:
          method: post
          path: "{anything}"
      -
        http:
          method: put
          path: "{anything}"
      -
        http:
          method: patch
          path: "{anything}"

  admin:
    handler: admin.admin
    events:
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: post
          path: "admin/apps/{id}/approve"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: get
          path: "admin/apps/{id}"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: get
          path: "admin/apps"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: patch
          path: "admin/apps/{id}"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: get
          path: "admin/users"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: post
          path: "admin/users/{email}/admin"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: post
          path: "admin/users/{email}/vendors/{vendor}"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: post
          path: "admin/users/{email}/enable"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: post
          path: "admin/vendors"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: get
          path: "admin/changes"

  apps:
    handler: apps.apps
    events:
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: post
          path: "vendors/{vendor}/apps"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: get
          path: "vendors/{vendor}/apps"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: get
          path: "vendors/{vendor}/apps/{app}"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: patch
          path: "vendors/{vendor}/apps/{app}"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: post
          path: "vendors/{vendor}/apps/{app}/approve"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: get
          path: "vendors/{vendor}/apps/{app}/versions"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: get
          path: "vendors/{vendor}/apps/{app}/versions/{version}"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: post
          path: "vendors/{vendor}/apps/{app}/versions/{version}/rollback"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: post
          path: "vendors/{vendor}/apps/{app}/icon"

  iconUpload:
    handler: iconUpload.upload
    events:
      -
        s3:
          bucket: "${file(./env.yml):S3_BUCKET}"
          event: "s3:ObjectCreated:Put"
          suffix: .png
#  vendorAppsRepositoryCreate:
#    handler: vendor-apps-repository.create
#    events:
#      -
#        http:
#          authorizer: ${self:custom.cognitoAuthorizer}
#          method: post
#          path: "vendors/{vendor}/apps/{app}/repository"
#  vendorAppsRepositoryGet:
#    handler: vendor-apps-repository.get
#    events:
#      -
#        http:
#          authorizer: ${self:custom.cognitoAuthorizer}
#          method: get
#          path: "vendors/{vendor}/apps/{app}/repository"

  authEmailTrigger:
    handler: authEmail.emails

  auth:
    handler: auth.auth
    events:
      -
        http:
          method: post
          path: "auth/login"
      -
        http:
          method: get
          path: "auth/token"
      -
        http:
          method: post
          path: "auth/forgot/{email}"
      -
        http:
          method: post
          path: "auth/forgot/{email}/confirm"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: get
          path: "auth/profile"
      -
        http:
          authorizer: ${self:custom.cognitoAuthorizer}
          method: post
          path: "auth/vendors/{vendor}"
      -
        http:
          method: post
          path: "auth/signup"
      -
        http:
          method: post
          path: "auth/confirm/{email}/{code}"
      -
        http:
          method: get
          path: "auth/confirm/{email}/{code}"
      -
        http:
          method: post
          path: "auth/confirm"


resources:
  Resources:
    developerPortalLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${file(./env.yml):SERVICE_NAME}-lambda-role"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: "${file(./env.yml):SERVICE_NAME}-lambda-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:${file(./env.yml):REGION}:${file(./env.yml):ACCOUNT_ID}:log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - "s3:*"
                  Resource:
                    - "arn:aws:s3:::${file(./env.yml):S3_BUCKET}/*"
                - Effect: Allow
                  Action:
                    - "cognito-identity:*"
                    - "cognito-idp:*"
                  Resource:
                    - ${self:custom.cognitoPoolArn}
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ses:SendEmail
                    - iam:CreateRole
                    - iam:PutRolePolicy
                    - ecr:*
                    - sts:AssumeRole
                  Resource: "*"
    developerPortalEcrRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${file(./env.yml):SERVICE_NAME}-ecr-role"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "*"
              Action: sts:AssumeRole
        Policies:
          - PolicyName: "${file(./env.yml):SERVICE_NAME}-ecr-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ecr:*
                  Resource: "*"
    Rds:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: "5"
        DBName: "${file(./env.yml):RDS_DATABASE}"
        DBInstanceIdentifier: "${file(./env.yml):SERVICE_NAME}-rds"
        DBInstanceClass: "${file(./env.yml):RDS_INSTANCE_CLASS}"
        Engine: "mysql"
        EngineVersion: "5.7"
        MasterUsername: "${file(./env.yml):RDS_USER}"
        MasterUserPassword: "${file(./env.yml):RDS_PASSWORD}"
        MultiAZ: "true"
        PubliclyAccessible: "false"
        DBSubnetGroupName: "${file(./env.yml):RDS_SUBNET_GROUP}"
        VPCSecurityGroups:
          - ${file(./env.yml):RDS_SECURITY_GROUP}
    CloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            -
              DomainName: ${file(./env.yml):S3_BUCKET}.s3.amazonaws.com
              Id: "S3-${file(./env.yml):S3_BUCKET}"
              S3OriginConfig:
                OriginAccessIdentity: ""
          Enabled: "true"
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: "S3-${file(./env.yml):S3_BUCKET}"
            ForwardedValues:
              QueryString: "false"
              Cookies:
                Forward: none
            ViewerProtocolPolicy: https-only
          ViewerCertificate:
            CloudFrontDefaultCertificate: "true"
  Outputs:
    RdsUri:
      Description: "RDS Endpoint"
      Value:
        "Fn::GetAtt": ["Rds", "Endpoint.Address"]
    RdsPort:
      Description: "RDS Port"
      Value:
        "Fn::GetAtt": ["Rds", "Endpoint.Port"]
    CloudFrontUri:
      Description: "CloudFront Uri"
      Value:
        "Fn::GetAtt": ["CloudFront", "DomainName"]
