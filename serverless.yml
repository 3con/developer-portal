---
custom:
  webpackIncludeModules: true

service: "${file(./env.yml):SERVICE_NAME}"

plugins:
   - serverless-offline
   - serverless-run-function-plugin
   - serverless-webpack

package:
  exclude:
    - package.json
  include:
    - lib
    - node_modules
    - .env

provider:
  name: aws
  region: ${file(./env.yml):REGION}
  stage: ${file(./env.yml):STAGE}
  profile: ${file(./env.yml):PROFILE}
  runtime: nodejs4.3
  memory: 256
  timeout: 30
  #cfLogs: true
  environment: ${file(./env.yml)}
  role: developerPortalLambdaRole
  vpc:
    securityGroupIds:
      - ${file(./env.yml):VPC_SECURITY_GROUP}
    subnetIds:
      - ${file(./env.yml):VPC_SUBNET1}
      - ${file(./env.yml):VPC_SUBNET2}
  stackTags:
    KeboolaStack: "developer-portal"

functions:
  authorizer:
    handler: authorizer.authorizer
  logger:
      handler: logger.handler

  adminAppsApprove:
    handler: admin.appApprove
    events:
      -
        http:
          authorizer: authorizer
          method: post
          path: "admin/apps/{id}/approve"
          default:
            statusCode: 204
  adminAppsDetail:
    handler: admin.appsDetail
    events:
      -
        http:
          authorizer: authorizer
          method: get
          path: "admin/apps/{id}"
  adminAppsList:
    handler: admin.apps
    events:
      -
        http:
          authorizer: authorizer
          method: get
          path: "admin/apps"
  adminAppsUpdate:
    handler: admin.appsUpdate
    events:
      -
        http:
          authorizer: authorizer
          method: patch
          path: "admin/apps/{id}"
  adminUsersList:
    handler: admin.users
    events:
      -
        http:
          authorizer: authorizer
          method: get
          path: "admin/users"
  adminUsersMakeAdmin:
    handler: admin.userMakeAdmin
    events:
      -
        http:
          authorizer: authorizer
          method: post
          path: "admin/users/{email}/admin"
          default:
            statusCode: 204
  adminUsersEnable:
    handler: admin.userEnable
    events:
      -
        http:
          authorizer: authorizer
          method: post
          path: "admin/users/{email}/enable"
          default:
            statusCode: 204
  vendorAppsApprove:
    handler: vendor-apps-approve.handler
    events:
      -
        http:
          authorizer: authorizer
          method: post
          path: "vendor/apps/{appId}/approve"
  vendorAppsCreate:
    handler: vendor-apps-update.appsCreate
    events:
      -
        http:
          authorizer: authorizer
          method: post
          path: vendor/apps
  vendorAppsDetail:
    handler: vendor-apps-list.appsDetail
    events:
      -
        http:
          authorizer: authorizer
          method: get
          path: "vendor/apps/{appId}"
      -
        http:
          authorizer: authorizer
          method: get
          path: "vendor/apps/{appId}/versions/{version}"
  vendorAppsIconsLinks:
    handler: vendor-apps-icons.links
    events:
      -
        http:
          authorizer: authorizer
          method: post
          path: "vendor/apps/{appId}/icons"
  vendorAppsIconsUpload:
    handler: vendor-apps-icons.upload
    events:
      -
        s3:
          bucket: "${file(./env.yml):S3_BUCKET}"
          event: "s3:ObjectCreated:Put"
          suffix: .png
  vendorAppsList:
    handler: vendor-apps-list.appsList
    events:
      -
        http:
          authorizer: authorizer
          method: get
          path: vendor/apps
  vendorAppsRepositoryCreate:
    handler: vendor-apps-repository.create
    events:
      -
        http:
          authorizer: authorizer
          method: post
          path: "vendor/apps/{appId}/repository"
  vendorAppsRepositoryGet:
    handler: vendor-apps-repository.get
    events:
      -
        http:
          authorizer: authorizer
          method: get
          path: "vendor/apps/{appId}/repository"
  vendorAppsUpdate:
    handler: vendor-apps-update.appsUpdate
    events:
      -
        http:
          authorizer: authorizer
          method: patch
          path: vendor/apps/{appId}
  vendorAppsVersionsList:
    handler: vendor-apps-versions.list
    events:
      -
        http:
          authorizer: authorizer
          method: get
          path: "vendor/apps/{appId}/versions"
  vendorAppsVersionsRollback:
    handler: vendor-apps-versions.rollback
    events:
      -
        http:
          authorizer: authorizer
          method: post
          path: "vendor/apps/{appId}/versions/{version}/rollback"


  authEmailTrigger:
    handler: auth-email.emailTrigger
  authConfirmPost:
    handler: auth.confirmPost
    events:
      -
        http:
          method: post
          path: "auth/confirm/{email}/{code}"
  authConfirmGet:
    handler: auth.confirmGet
    events:
      -
        http:
          method: get
          path: "auth/confirm/{email}/{code}"
  authConfirmResend:
    handler: auth.confirmResend
    events:
      -
        http:
          method: post
          path: auth/confirm
  authForgot:
    handler: auth.forgot
    events:
      -
        http:
          method: post
          path: "auth/forgot/{email}"
  authForgotConfirm:
    handler: auth.forgotConfirm
    events:
      -
        http:
          method: post
          path: "auth/forgot/{email}/confirm"
  authLogin:
    handler: auth.login
    events:
      -
        http:
          method: post
          path: auth/login
  authProfile:
    handler: auth.profile
    events:
      -
        http:
          authorizer: authorizer
          method: get
          path: auth/profile
  authProfileChange:
    handler: auth.profileChange
    events:
      -
        http:
          authorizer: authorizer
          method: put
          path: auth/profile
  authSignup:
    handler: auth.signup
    events:
      -
        http:
          method: post
          path: auth/signup

  appsDetail:
    handler: public.detail
    events:
      -
        http:
          method: get
          path: "apps/{appId}"
      -
        http:
          method: get
          path: "apps/{appId}/versions/{version}"
  appsList:
    handler: public.list
    events:
      -
        http:
          method: get
          path: apps
  appsVersionsList:
    handler: public.versions
    events:
      -
        http:
          method: get
          path: "apps/{appId}/versions"
  vendorsList:
    handler: public.vendorsList
    events:
      -
        http:
          method: get
          path: "vendors"
  vendorDetail:
    handler: public.vendorDetail
    events:
      -
        http:
          method: get
          path: "vendors/{vendor}"
  stacksList:
    handler: public.stacksList
    events:
      -
        http:
          method: get
          path: "stacks"

resources:
  Resources:
    developerPortalLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${file(./env.yml):SERVICE_NAME}-lambda-role"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: "${file(./env.yml):SERVICE_NAME}-lambda-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:${file(./env.yml):REGION}:${file(./env.yml):ACCOUNT_ID}:log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - "s3:*"
                  Resource:
                    - "arn:aws:s3:::${file(./env.yml):S3_BUCKET}/*"
                - Effect: Allow
                  Action:
                    - "cognito-identity:*"
                    - "cognito-idp:*"
                  Resource:
                    - "arn:aws:cognito-idp:${file(./env.yml):REGION}:${file(./env.yml):ACCOUNT_ID}:userpool/${file(./env.yml):COGNITO_POOL_ID}"
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ses:SendEmail
                    - iam:CreateRole
                    - iam:PutRolePolicy
                    - ecr:*
                    - sts:AssumeRole
                  Resource: "*"
    developerPortalEcrRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${file(./env.yml):SERVICE_NAME}-ecr-role"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                AWS:
                  - "arn:aws:iam::${file(./env.yml):ACCOUNT_ID}:role/${file(./env.yml):SERVICE_NAME}-lambda-role"
              Action: sts:AssumeRole
        Policies:
          - PolicyName: "${file(./env.yml):SERVICE_NAME}-ecr-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ecr:*
                  Resource: "*"
    Rds:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: "5"
        DBName: "${file(./env.yml):RDS_DATABASE}"
        DBInstanceIdentifier: "${file(./env.yml):SERVICE_NAME}-rds"
        DBInstanceClass: "${file(./env.yml):RDS_INSTANCE_CLASS}"
        Engine: "mysql"
        EngineVersion: "5.7"
        MasterUsername: "${file(./env.yml):RDS_USER}"
        MasterUserPassword: "${file(./env.yml):RDS_PASSWORD}"
        MultiAZ: "true"
        PubliclyAccessible: "true"
        DBSubnetGroupName: "${file(./env.yml):RDS_SUBNET_GROUP}"
        VPCSecurityGroups:
          - ${file(./env.yml):VPC_SECURITY_GROUP}
    CloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            -
              DomainName: ${file(./env.yml):S3_BUCKET}.s3.amazonaws.com
              Id: "S3-${file(./env.yml):S3_BUCKET}"
              S3OriginConfig:
                OriginAccessIdentity: ""
          Enabled: "true"
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: "S3-${file(./env.yml):S3_BUCKET}"
            ForwardedValues:
              QueryString: "false"
              Cookies:
                Forward: none
            ViewerProtocolPolicy: https-only
          ViewerCertificate:
            CloudFrontDefaultCertificate: "true"
  Outputs:
    RdsUri:
      Description: "RDS Endpoint"
      Value:
        "Fn::GetAtt": ["Rds", "Endpoint.Address"]
    RdsPort:
      Description: "RDS Port"
      Value:
        "Fn::GetAtt": ["Rds", "Endpoint.Port"]
    CloudFrontUri:
      Description: "CloudFront Uri"
      Value:
        "Fn::GetAtt": ["CloudFront", "DomainName"]
